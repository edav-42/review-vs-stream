[["index.html", "Review vs Stream Chapter 1 Introduction", " Review vs Stream Yihan Chen, Chenyu Zhang 2022-12-15 Chapter 1 Introduction "],["proposal.html", "Chapter 2 Proposal 2.1 Research topic 2.2 Data availability", " Chapter 2 Proposal 2.1 Research topic The disconnection between critic reviews and actual sales and streams exists in every area of art. We are interested in the relationships between reviews and streams of top-reviewed/streamed tracks and albums. Specifically, we consider three dimensions of ranking: Critic reviews: reviews written by professional critics; User ratings: aggregated ratings assigned by general users; Streams: number of streams on streaming services. Intuitively, music with higher reviews should be streamed more. However, we can see a lot of hit songs with bad reviews, and many highly acclaimed albums that most people have never heard of. Therefore, exploring and visualizing the relationships between reviews and streams, together with some other dimensions, will give us some insights into how these systems work. At the application level, the revealed information can help build better recommendation systems, promotion strategies, etc. 2.2 Data availability We collect data from 4 sources: Metacritic for critic reviews Rate Your Music for user ratings ChartMasters and Spotify for streaming performance 2.2.1 Critic Reviews Traditionally, critic reviews are released by publications like magazines and newspapers. Metacritic is a famous and reliable website that aggregates reviews of films, TV shows, music albums, etc. As for films, there are several other internet databases that are doing a similar job, like IMDB and Rotten Tomatoes. But when it comes to music, Metacritic is almost the only reliable source of aggregated critic reviews. What it does is just collect reviews from various publications, and then give an average score. Example critic reviews (Wikipedia) Metacritic ranks albums according to their review score on its website. For example: Best Music and Albums for 2020. Metacritic adds new albums to its database several times a week and updates the reviews everyday 1. The data is presented in an HTML table, so we can easily scrape from their website using the package rvest. Note that we can also scrape the information of a specific album once we know its title. For example, from the album page Fetch the Bolt Cutters by Fiona Apple Reviews and Tracks. A sample observation: Rank Title Artist(s) Release Date Critic Review User Score 1 Fetch the Bolt Cutters Fiona Apple April 17, 2020 98 81 2.2.2 User Ratings Most music review websites like Metacritic and Pitchfork focus on critic reviews. In terms of user ratings, Rate Your Music (RYM) is the largest community-driven online music database. For example, the album OK Computer has 83,020 ratings on RYM, while only 654 user ratings on Metacritic. The ratings on RYM are averaged on user ratings. Like Metacritic, it also ranks albums according to their ratings on its website. For example: Best albums of 2020 - Rate Your Music. RYM updates the charts every week on Tuesdays between 9-10 AM Pacific US time (18:00-19:00 Central European time) 2. We use an unofficial Python API, rymscraper, to scrape the data on its website. The scripts will save fetched data in CSV files. Then we can read these CSV files using the function read.csv(). A sample observation: Rank Album Artist(s) Release Date Genres Rating # Ratings # Reviews 4 One Life Malibu 1 November 2019 Ambient 3.63 721 2 2.2.3 Streams Today we are in an age of streaming media. Spotify is the world’s biggest music streaming platform. However, like other streaming platforms, Spotify does not expose the number of streams to the public. However, its official APIs expose an attribute called popularity, which is a value between 0 and 100 based on the number of plays a track has. This feature can reflect the streaming performance of a track. And the popularity of an album can be calculated based on its tracks’ popularity. Different features have different data update frequencies. For popularity, the data updates every day, but may lag actual popularity by a few days3. We use spotifyr, an R wrapper for Spotify’s API, to get data. An example observation: Album Average Popularity Maximum Track Popularity Summed Popularity Future Nostalgia 70.63636 83 777 Another professional website that provides data on streams is ChartMasters. It converts the number of streams to equivalent album sales (EAS), updates the data daily, and presents it in HTML tables. Therefore, we can use rvest to scrape the data. However, although ChartMasters is a reputable organization and claims that they collect data directly from official databases like Spotify, we are unable to find the direct source of their data. Therefore, we use data from ChartMasters as additional data to confirm other observations. Frequently Asked Questions - Metacritic↩︎ Charts FAQ - Rate Your Music↩︎ Web API Reference | Spotify for Developers↩︎ "],["data.html", "Chapter 3 Data 3.1 Sources 3.2 Cleaning / transformation 3.3 Missing value analysis", " Chapter 3 Data 3.1 Sources We first scrapped album ratings from Metacritic, a famous and reliable website that aggregates reviews and ratings for music albums. We scrapped the critic ratings for albums released between 2018 and 2022(inclusive) and concatenate them to one table.(Please see metacritic.Rmd for scraping and cleaning code) Based on the albums and artist name we got from the Metacritic website, we collected the user rating of corresponding albums from Rate Your Music (RYM), which is the largest community-driven online music database. To be specific, we query each albums by its name and artist through an unofficial API rymscraper. (Please see rym.ipynb for querying and cleaning code) For the user popularity of each album, we collect popularity from Spotify official APIs. Since Spotify provides the popularity of each track in an album, we records the avg, mean, median, and max popularity of all tracks in a album for each album. (Please see spotify.Rmd for querying and cleaning code) Additionally, we also collect the features of all songs that appears in the album that we collected before. That is, we have a new table to save the duration, name, popularity, acousticness, danceability, energy, instrumentalness, key, liveness, loudness, mode, speechiness, tempo, time_signature and valence of each song/track.(Please see spotify_tracks.Rmd for querying and cleaning code) Because the raw data is not so clean and showing them directly would be a disaster, we prefer introduce the types of variables and other information of these data set during&amp;after cleaning and transformation. :) 3.2 Cleaning / transformation 3.2.1 Metacritic Data As we can see from below, the raw data we scrapped from the Metacritic, it is not so clean. The data doesn’t have proper column name and some columns are useless in the following analysis. And more importantly, the data type of all columns are characters. Thus, before analyzing, we did data cleaning to the Metacritic data set: Delete useless columns: V6, V8, V9 are useless because of either containing duplicate data or having long text that is not helpful. Rename left columns: according to the meaning of each row, we rename the columns as “Metacritic_Score”, “Rank”, “Album_Name”, “Singer”, “Release_Date”, “Description”, “User_Score”, “Release_Year” Transform the data Metacritic_Score &amp; Rank: transform them from type char to type int for future analysis. Singer: contains redundant characters “by”, e.g. “by Fiona Apple”. Extract only the artist name, e.g. “Fiona Apple” User_Score: transform is from type char to type float for future analysis. Release_Date: it is originally in char type, e.g. “April 17, 2020”. Transform it to R datetime type, e.g. 2020-04-17 id: for future usage(joining different dataframe) After transformation and cleaning, the Metacritic data contains 2275 observations of 9 different variables. Variable Name Data Type Meaning id int album id Metacritic_Score int critic rating on Metacritic Rank int rank in release year Album_Name chr album name Singer chr album artist Release_Date Datetime album release date Description chr album description User_Score num album user score Release_Year int album release year 3.2.2 Rate Your Music As we can see from the snapshot of the description of sample album of the raw data we collected from Rate Your Music (RYM), the data is messy. Before conducting merging, data need cleaning and transformation. Delete useless columns: Type, Recorded are useless because they contain duplicate data. New column: We found that “RYM Rating” is in charcter type and contains not only ratings but also number of people who rate the album. Therefore, we extract the number of ratings and create a new column named “Num_of_RYM_Ratings” Transform the data Released: it is originally in char type, e.g. “14 September 2018”. Transform it to R datetime type, e.g. 2018-09-14 RYM Rating: Extract ratings from characters and change the data type to numerate. id: for future usage(joining different dataframe) reserve the left data and transform them in the future if needed. After transformation and cleaning, the RYM data contains 2275 observations of 13 different variables. Variable Name Data Type Meaning id int album id RYM.Rating int user rating on RYM Ranked chr rank in release year Name chr album name Artist chr album artist Released Datetime album release date Descriptors chr album description Track.listing chr tracks in album Release_Year int album release year Genres chr album genre Language chr song language Colorscheme chr album colorscheme Num_of_RYM_Ratings int number of users who rate the album 3.2.3 Spotify The data we get from Spotify official APIs is quite clean. Thus we will directly introduce the variables. The album data set contains 2275 observations of 6 different variables. Variable Name Data Type Meaning id int album id avg_pop num average popularity of all tracks in this album max_pop int max popularity among all tracks in this album min_pop int min popularity among all tracks in this album med_pop num median popularity of all tracks in this album n int number od tracks in this album The data set for tracks contains 26834 observations of 16 different variables. Variable Name Data Type Meaning id int album id track_id chr id for tracking duration_ms int duration of each song in ms name chr name of song popularity int popularity acousticness int acousticness danceability num danceability energy num energy instrumentalness num instrumentalness key int key liveness num liveness loudness num loudness mode int mode speechiness num speechiness tempo num tempo time_signature int time_signature valence num valence 3.2.4 Final Data Set After cleaning data set from each website/API, we concatenate 3 album-level data set by “id”, which was generated during the query to API and was based on combination of album name and artist name. The final album data set has 2275 observations of 20 variables.(For duplicate columns, we only conserve 1 column in the final data set) The following picture is for a rough look. Please see this for a detailed look. Remember that we also have a track-level data set from Spotify. We will have exploratory data analysis based on it later. 3.3 Missing value analysis ## [1] &quot;id&quot; &quot;Metacritic_Score&quot; &quot;Rank&quot; ## [4] &quot;Album_Name&quot; &quot;Singer&quot; &quot;Release_Date&quot; ## [7] &quot;Desciption&quot; &quot;Release_Year&quot; &quot;RYM_Rating&quot; ## [10] &quot;Genres&quot; &quot;Language&quot; &quot;Tracks&quot; ## [13] &quot;Colorscheme&quot; &quot;RYM_Rank&quot; &quot;Num_of_RYM_Ratings&quot; ## [16] &quot;avg_pop&quot; &quot;max_pop&quot; &quot;min_pop&quot; ## [19] &quot;med_pop&quot; &quot;n&quot; ## NOTE: The following pairs of variables appear to have the same missingness pattern. ## Please verify whether they are in fact logically distinct variables. ## [,1] [,2] ## [1,] &quot;RYM_Rating&quot; &quot;Num_of_RYM_Ratings&quot; ## [2,] &quot;Tracks&quot; &quot;Colorscheme&quot; ## [3,] &quot;avg_pop&quot; &quot;max_pop&quot; ## [4,] &quot;avg_pop&quot; &quot;min_pop&quot; ## [5,] &quot;avg_pop&quot; &quot;med_pop&quot; ## [6,] &quot;avg_pop&quot; &quot;n&quot; ## [7,] &quot;max_pop&quot; &quot;min_pop&quot; ## [8,] &quot;max_pop&quot; &quot;med_pop&quot; ## [9,] &quot;max_pop&quot; &quot;n&quot; ## [10,] &quot;min_pop&quot; &quot;med_pop&quot; ## [11,] &quot;min_pop&quot; &quot;n&quot; ## [12,] &quot;med_pop&quot; &quot;n&quot; ## [1] id Metacritic_Score Rank Album_Name ## [5] Singer Release_Date Desciption Release_Year ## [9] RYM_Rating Genres Language Tracks ## [13] Colorscheme RYM_Rank Num_of_RYM_Ratings avg_pop ## [17] max_pop min_pop med_pop n ## &lt;0 rows&gt; (or 0-length row.names) As we can see, there are only few values missing. This is due to the “search” nature of our collecting method. We get the matched results from some search engines; since it is rare for search engines to return an empty list, and we relax the matching criteria, values are rarely missing. Also, the missing patterns are very clear: If we cannot find an album on Spotify, then the data on its tracks are all missing; this includes avg_pop, max_pop, min_pop, med_pop, n. The missing albums on spotify are due to copyrights restrictions. For example, the band Belly removed their album “Dove” from Spotify. All of these albums can be searched on Spotify, but no tracks information are offered. If an album gets no ratings on RYM, its RYM_Rating and Num_of_RYM_Ratings are both missing. There are two albums we found on RYM but with no RYM_Rating and Num_of_RYM_Ratings: “Get Up Sequences, Pt. 1” by The Go! Team. On RYM, the title of this album is “Get Up Sequences Part One”, and the artist has another album called “Get Up Sequences Part Two” comming up. Since our algorithm doesn’t know “1” is “One”, it returned the wrong, unreleased album, which has no ratings. “MOSS” by Maya Hawke. This is an internal error of RYM: the page of “MOSS” https://rateyourmusic.com/release/album/maya-hawke/moss leads to a wrong page which has no rating If we cannot find an album on RYM, then the data offered by RYM is missing; this includes RYM_Rating, Num_of_RYM_Ratings, Genres, Language, Tracks, Colorscheme, RYM_Rank. There is only one album we cannot find on RYM: “Pulse/Quartet” by Steve Reich. However, complete data doesn’t mean correct data. There is no such thing as a free lunch. The completeness of our data provided by the “search” nature of our data collecting method also raise the probability of returning a wrong data, when the data should be missing. For example, we use the first album returned by the Spotify search API as our observation. However, if the album doesn’t exist on Spotify, it may still return some related results. Then we collect the wrong data. Such senarios are more often when using RYM API. For example, “Halloween [Original 2018 Motion Picture Soundtrack]” by John Carpenter in the Metacritic chart is a 2018 soundtrack which is not included by RYM. However, this album has many older versions, so the RYM API returns an older version which is released in 1983. Some other examples includes that the album in the Metacritic chart is a new live version which is not included by RYM, so the RYM API returns the studio version. Also, we are exploring the “art” world; artists are full of creative ideas to name themself and their albums. Therefore, there are relatively more edge cases where we will get the wrongly-matched data. However, it is hard to consider all the edge cases and eliminate the wrong data. It is our next steps to reduce the error possibility. "],["results.html", "Chapter 4 Results 4.1 Metacritic 4.2 RYM 4.3 Metacritic VS RYM 4.4 Spotify 4.5 Spotify VS Metacritic VS RYM", " Chapter 4 Results 4.1 Metacritic 4.2 RYM 4.3 Metacritic VS RYM 4.4 Spotify ！！这里有一个隐秘的trend，就是有一些maxpop和medpop很高，但是min——pop极低的专辑，这说明有些专辑内部pop方差很大（虽然大部分不是这样）。 4.4.1 Spotify Track 4.5 Spotify VS Metacritic VS RYM ## [1] &quot;id&quot; &quot;Metacritic_Score&quot; &quot;Rank&quot; ## [4] &quot;Album_Name&quot; &quot;Singer&quot; &quot;Release_Date&quot; ## [7] &quot;Desciption&quot; &quot;Release_Year&quot; &quot;RYM_Rating&quot; ## [10] &quot;Genres&quot; &quot;Language&quot; &quot;Tracks&quot; ## [13] &quot;Colorscheme&quot; &quot;RYM_Rank&quot; &quot;Num_of_RYM_Ratings&quot; ## [16] &quot;avg_pop&quot; &quot;max_pop&quot; &quot;min_pop&quot; ## [19] &quot;med_pop&quot; &quot;n&quot; &quot;Fct_Release_Year&quot; "],["interactive-component.html", "Chapter 5 Interactive component", " Chapter 5 Interactive component This section allow users to intractively explore the relationship between the review and popularity of albums. We selected top 100 albums on Metacritic in 2022. We also present the relationship between the review and other aspects like danceability and energy. The possibilities are unlimited. On the left half of the page, we rank the albums according to the Metacritic chart. The right half of the page is interactive. First, it present the average popularity of the album on Spotify in a way that resembles a Cleveland dot plot. As we can discover, locally, there is no strong association between the review rank and the average popularity. However, when we broaden our horizon to the whole chart, we can see a clear trend that albums with higher review rank are more popular. Moreover, users can click on the circle representing an album. Then the circle will expand to a popularity range of the tracks in that album. This provides more detailed information about the popularity of the album. Also, when users hover on the circle representing a track, it will show the track name. With this intractive gragh, users can easily figure out the review rank, average popularity of an album, and popularity of specific tracks. These dimensions cannot be easily presented in a static graph without clustering the graph. We also provide two other aspects: danceability and energy. After clicking on the buttons on the top, the graph will transition to present another aspect. iframe {border: none;} .book .book-body .page-wrapper .page-inner { max-width: 1250px !important; } "],["conclusion.html", "Chapter 6 Conclusion", " Chapter 6 Conclusion "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
