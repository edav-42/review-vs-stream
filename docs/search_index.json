[["index.html", "Review vs Stream Chapter 1 Introduction", " Review vs Stream Yihan Chen, Chenyu Zhang 2022-12-15 Chapter 1 Introduction "],["proposal.html", "Chapter 2 Proposal 2.1 Research topic 2.2 Data availability", " Chapter 2 Proposal 2.1 Research topic The disconnection between critic reviews and actual sales and streams exists in every area of art. We are interested in the relationships between reviews and streams of top-reviewed/streamed tracks and albums. Specifically, we consider three dimensions of ranking: Critic reviews: reviews written by professional critics; User ratings: aggregated ratings assigned by general users; Streams: number of streams on streaming services. Intuitively, music with higher reviews should be streamed more. However, we can see a lot of hit songs with bad reviews, and many highly acclaimed albums that most people have never heard of. Therefore, exploring and visualizing the relationships between reviews and streams, together with some other dimensions, will give us some insights into how these systems work. At the application level, the revealed information can help build better recommendation systems, promotion strategies, etc. 2.2 Data availability We collect data from 4 sources: Metacritic for critic reviews Rate Your Music for user ratings ChartMasters and Spotify for streaming performance 2.2.1 Critic Reviews Traditionally, critic reviews are released by publications like magazines and newspapers. Metacritic is a famous and reliable website that aggregates reviews of films, TV shows, music albums, etc. As for films, there are several other internet databases that are doing a similar job, like IMDB and Rotten Tomatoes. But when it comes to music, Metacritic is almost the only reliable source of aggregated critic reviews. What it does is just collect reviews from various publications, and then give an average score. Example critic reviews (Wikipedia) Metacritic ranks albums according to their review score on its website. For example: Best Music and Albums for 2020. Metacritic adds new albums to its database several times a week and updates the reviews everyday 1. The data is presented in an HTML table, so we can easily scrape from their website using the package rvest. Note that we can also scrape the information of a specific album once we know its title. For example, from the album page Fetch the Bolt Cutters by Fiona Apple Reviews and Tracks. A sample observation: Rank Title Artist(s) Release Date Critic Review User Score 1 Fetch the Bolt Cutters Fiona Apple April 17, 2020 98 81 2.2.2 User Ratings Most music review websites like Metacritic and Pitchfork focus on critic reviews. In terms of user ratings, Rate Your Music (RYM) is the largest community-driven online music database. For example, the album OK Computer has 83,020 ratings on RYM, while only 654 user ratings on Metacritic. The ratings on RYM are averaged on user ratings. Like Metacritic, it also ranks albums according to their ratings on its website. For example: Best albums of 2020 - Rate Your Music. RYM updates the charts every week on Tuesdays between 9-10 AM Pacific US time (18:00-19:00 Central European time) 2. We use an unofficial Python API, rymscraper, to scrape the data on its website. The scripts will save fetched data in CSV files. Then we can read these CSV files using the function read.csv(). A sample observation: Rank Album Artist(s) Release Date Genres Rating # Ratings # Reviews 4 One Life Malibu 1 November 2019 Ambient 3.63 721 2 2.2.3 Streams Today we are in an age of streaming media. Spotify is the world’s biggest music streaming platform. However, like other streaming platforms, Spotify does not expose the number of streams to the public. However, its official APIs expose an attribute called popularity, which is a value between 0 and 100 based on the number of plays a track has. This feature can reflect the streaming performance of a track. And the popularity of an album can be calculated based on its tracks’ popularity. Different features have different data update frequencies. For popularity, the data updates every day, but may lag actual popularity by a few days3. We use spotifyr, an R wrapper for Spotify’s API, to get data. An example observation: Album Average Popularity Maximum Track Popularity Summed Popularity Future Nostalgia 70.63636 83 777 Another professional website that provides data on streams is ChartMasters. It converts the number of streams to equivalent album sales (EAS), updates the data daily, and presents it in HTML tables. Therefore, we can use rvest to scrape the data. However, although ChartMasters is a reputable organization and claims that they collect data directly from official databases like Spotify, we are unable to find the direct source of their data. Therefore, we use data from ChartMasters as additional data to confirm other observations. Frequently Asked Questions - Metacritic↩︎ Charts FAQ - Rate Your Music↩︎ Web API Reference | Spotify for Developers↩︎ "],["data.html", "Chapter 3 Data 3.1 Sources 3.2 Cleaning / transformation 3.3 Missing value analysis", " Chapter 3 Data 3.1 Sources As stated in Chapter Proposal, we have three major data sources: Metacritic, for critic reviews Rate Your Music (RYM), for user ratings Spotify, for album streams/popularity We first scrapped album ratings from Metacritic, a famous and reliable website that aggregates reviews and ratings for music albums. We scrapped the critic ratings for albums released between 2018 and 2022(inclusive) and concatenate them to one table. We get 2275 records in total. (Please see metacritic.Rmd for scraping and cleaning code) Based on the albums and artist name we got from the Metacritic website, we collected the user rating of corresponding albums from Rate Your Music (RYM), which is the largest community-driven online music database. To be specific, we query each albums by its name and artist through a modified unofficial API rymscraper. (Please see rym.ipynb for querying and cleaning code) For the user popularity of each album, we collect popularity from Spotify official APIs. Since Spotify provides the popularity of each track in an album, we records the min, mean, median, and max popularity of all tracks in a album for each album. (Please see spotify.Rmd for querying and cleaning code) Additionally, from Spotify APIs, we also collect the features of all songs that appears in the album that we collected before. That is, we have a new table to save the duration, name, popularity, acousticness, danceability, energy, instrumentalness, key, liveness, loudness, mode, speechiness, tempo, time_signature and valence of each song/track.(Please see spotify_tracks.Rmd for querying and cleaning code) Because the raw data is not so clean and showing them directly would be a disaster, we prefer introduce the types of variables and other information of these data set during&amp;after cleaning and transformation. :) 3.1.1 Data collecting Since data collecting and processing is especially important in our project, before moving on to the cleaning and transformation section, we would like to further explain the method and logic behind our data collecting. First, none of our data is from an existent file; we have to scrape the data manually or use some APIs. And for every source, there are two ways to get the data: Scrape a chart. All sources provide some chart webpages, e.g.,https://rateyourmusic.com/charts/. These charts are in a table HTML element, so we can easily scrape them to get a CSV file. Search a database. There are existent official/unofficial APIs, or we can build some basic APIs, for all sources. These APIs enable us to get the information of an album through related information, like artist and album name. Therefore, the first question is which way should we use to collect the data. There are also two approaches: Get all data by scrapping charts. Then join the charts from different sources. Get a base chart, then search the databases for every record in the base chart. We adapted the second approach, because the join operations may lead to either too many missing values (outer join) or too few records (inner join). Also, Spotify doesn’t provide enough charts data. Therefore, we scrapped Metacritic charts as the base charts, and then search the records in the charts using RYM and Spotify APIs. The Spotify APIs performed relatively well and are closed source, hence we we didn’t touch them. However, the RYM unofficial APIs miss many values without modification. Therefore, we enhance the RYM APIs by a three-layer search: First we transform the artist and album name to an URL, and search the album directly using the URL. Since an artist or an album may have many alternative names and may contain special characters, this search may return an empty result with a high probability. If the first search fails, we then use the artist name to search their discography. Then we look through the discography and return the closest match to what we are looking for. This search almost always find the album except for some edge cases like it finds the wrong artist. If the first two searches fail, we then directly search the database using string “artist - album”. Among returned records, we get the closest match to what we are looking for. Since a search engine will always return some results even the database doesn’t contain the record, this search hardly fails. The original RYM APIs only perform the second-layer search. Also, we adjust the “get closest match” method to make it more tolerant to special characters. Although this three-layer search almost found all albums, some of the results are wrong; we will explain the reasons in section Missing value analysis. 3.2 Cleaning / transformation 3.2.1 Metacritic Data As we can see from below, the raw data we scrapped from the Metacritic, it is not so clean. The data doesn’t have proper column name and some columns are useless in the following analysis. And more importantly, the data type of all columns are characters. Thus, before analyzing, we did data cleaning to the Metacritic data set: Delete useless columns: V6, V8, V9 are useless because of either containing duplicate data or having long text that is not helpful. Rename left columns: according to the meaning of each row, we rename the columns as Metacritic_Score, Rank, Album_Name, Singer, Release_Date, Description, User_Score, Release_Year Transform the data Metacritic_Score &amp; Rank: transform them from type char to type int for future analysis. Singer: contains redundant characters “by”, e.g. “by Fiona Apple”. Extract only the artist name, e.g. “Fiona Apple” User_Score: transform is from type char to type float for future analysis. Release_Date: it is originally in char type, e.g. “April 17, 2020”. Transform it to R datetime type, e.g. 2020-04-17 id: for future usage(joining different dataframe) After transformation and cleaning, the Metacritic data contains 2275 observations of 9 different variables. Variable Name Data Type Meaning id int album id Metacritic_Score int critic rating on Metacritic Rank int rank in release year Album_Name chr album name Singer chr album artist Release_Date Datetime album release date Description chr album description User_Score num album user score Release_Year int album release year 3.2.2 Rate Your Music As we can see from the snapshot of the description of sample album of the raw data we collected from Rate Your Music (RYM), the data is messy. Before conducting merging, data need cleaning and transformation. Delete useless columns: Type, Recorded are useless because they contain duplicate data. New column: We found that RYM Rating is in charcter type and contains not only ratings but also number of people who rate the album. Therefore, we extract the number of ratings and create a new column named Num_of_RYM_Ratings Transform the data Released: it is originally in char type, e.g. “14 September 2018”. Transform it to R datetime type, e.g. 2018-09-14 RYM Rating: Extract ratings from characters and change the data type to numerate. id: for future usage(joining different dataframe) reserve the left data and transform them in the future if needed. After transformation and cleaning, the RYM data contains 2275 observations of 13 different variables. Variable Name Data Type Meaning id int album id RYM.Rating int user rating on RYM Ranked chr rank in release year Name chr album name Artist chr album artist Released Datetime album release date Descriptors chr album description Track.listing chr tracks in album Release_Year int album release year Genres chr album genre Language chr song language Colorscheme chr album colorscheme Num_of_RYM_Ratings int number of users who rate the album 3.2.3 Spotify The data we get from Spotify official APIs is quite clean. Thus we will directly introduce the variables. The album data set contains 2275 observations of 6 different variables. Variable Name Data Type Meaning id int album id avg_pop num average popularity of all tracks in this album max_pop int max popularity among all tracks in this album min_pop int min popularity among all tracks in this album med_pop num median popularity of all tracks in this album n int number od tracks in this album The data set for tracks contains 26834 observations of 16 different variables. Variable Name Data Type Meaning id int album id track_id chr id for tracking duration_ms int duration of each song in ms name chr name of song popularity int popularity acousticness int acousticness danceability num danceability energy num energy instrumentalness num instrumentalness key int key liveness num liveness loudness num loudness mode int mode speechiness num speechiness tempo num tempo time_signature int time_signature valence num valence 3.2.4 Final Data Set After cleaning data set from each website/API, we concatenate 3 album-level data set by id, which was generated during the query to API using function tibble::rowid_to_column. The final album data set has 2275 observations of 20 variables.(For duplicate columns, we only conserve 1 column in the final data set) The following picture is for a rough look. Please see this for a detailed look. Remember that we also have a track-level data set from Spotify. We will have exploratory data analysis based on it later. 3.3 Missing value analysis We first analyze the joint album-level data. ## NOTE: The following pairs of variables appear to have the same missingness pattern. ## Please verify whether they are in fact logically distinct variables. ## [,1] [,2] ## [1,] &quot;RYM_Rating&quot; &quot;Num_of_RYM_Ratings&quot; ## [2,] &quot;Tracks&quot; &quot;Colorscheme&quot; ## [3,] &quot;avg_pop&quot; &quot;max_pop&quot; ## [4,] &quot;avg_pop&quot; &quot;min_pop&quot; ## [5,] &quot;avg_pop&quot; &quot;med_pop&quot; ## [6,] &quot;avg_pop&quot; &quot;n&quot; ## [7,] &quot;max_pop&quot; &quot;min_pop&quot; ## [8,] &quot;max_pop&quot; &quot;med_pop&quot; ## [9,] &quot;max_pop&quot; &quot;n&quot; ## [10,] &quot;min_pop&quot; &quot;med_pop&quot; ## [11,] &quot;min_pop&quot; &quot;n&quot; ## [12,] &quot;med_pop&quot; &quot;n&quot; ## [1] id Metacritic_Score Rank Album_Name ## [5] Singer Release_Date Desciption Release_Year ## [9] RYM_Rating Genres Language Tracks ## [13] Colorscheme RYM_Rank Num_of_RYM_Ratings avg_pop ## [17] max_pop min_pop med_pop n ## &lt;0 rows&gt; (or 0-length row.names) As we can see, there are only few values missing. This is due to the “search” nature of our collecting method. We get the matched results from some search engines; since it is rare for search engines to return an empty list, and we relax the matching criteria, values are rarely missing. Also, the missing patterns are very clear: If we cannot find an album on Spotify, then the data on its tracks are all missing; this includes avg_pop, max_pop, min_pop, med_pop, n. The missing albums on spotify are due to copyrights restrictions. For example, the band Belly removed their album “Dove” from Spotify. All of these albums can be searched on Spotify, but no tracks information are offered. If an album gets no ratings on RYM, its RYM_Rating and Num_of_RYM_Ratings are both missing. There are two albums we found on RYM but with no RYM_Rating and Num_of_RYM_Ratings: “Get Up Sequences, Pt. 1” by The Go! Team. On RYM, the title of this album is “Get Up Sequences Part One”, and the artist has another album called “Get Up Sequences Part Two” comming up. Since our algorithm doesn’t know “1” is “One”, it returned the wrong, unreleased album, which has no ratings. “MOSS” by Maya Hawke. This is an internal error of RYM: the page of “MOSS” https://rateyourmusic.com/release/album/maya-hawke/moss leads to a wrong page which has no rating If we cannot find an album on RYM, then the data offered by RYM is missing; this includes RYM_Rating, Num_of_RYM_Ratings, Genres, Language, Tracks, Colorscheme, RYM_Rank. There is only one album we cannot find on RYM: “Pulse/Quartet” by Steve Reich. However, complete data doesn’t mean correct data. There is no such thing as a free lunch. The completeness of our data provided by the “search” nature of our data collecting method also raise the probability of returning a wrong data, when the data should be missing. For example, we use the first album returned by the Spotify search API as our observation. However, if the album doesn’t exist on Spotify, it may still return some related results. Then we collect the wrong data. Such senarios are more often when using RYM API. For example, “Halloween [Original 2018 Motion Picture Soundtrack]” by John Carpenter in the Metacritic chart is a 2018 soundtrack which is not included by RYM. However, this album has many older versions, so the RYM API returns an older version which is released in 1983. Some other examples includes that the album in the Metacritic chart is a new live version which is not included by RYM, so the RYM API returns the studio version. Also, we are exploring the “art” world; artists are full of creative ideas to name themself and their albums. Therefore, there are relatively more edge cases where we will get the wrongly-matched data. However, it is hard to consider all the edge cases and eliminate the wrong data. It is our next steps to reduce the error possibility. Now we give a brief analysis of the missing values in the track-level data. As we can see, since we are collecting the tracks information of our already collected albums, the basic information like name (nam) and popularity (ppl) has no missing values. However, there are 20 tracks that do not have audio features. And we can see that if one of the audio feature is missing, all other audio features of that track are also missing. Therefore, we can deduce that Spotify may not record the audio information for those tracks, or the APIs fail to get the audio features. "],["results.html", "Chapter 4 Results 4.1 Metacritic 4.2 RYM 4.3 Metacritic VS RYM 4.4 Spotify 4.5 Spotify VS Metacritic VS RYM", " Chapter 4 Results In the part of data exploratory analysis, we will first introduce the respective data of Metacritic Ratings and Rate Your Music Ratings in turn, then compare and analyze ratings from Metacritic and RYM. Next we will introduce Spotify Popularity and Tracks Variables, and finally we will cross-analyze data from these three data source. Note: For reading convenience, the following plots whose feature are filled in purple denotes that the main data is from Metacritic, blue for RYM and green for Spotify. Orange represents cross-analysis. :) 4.1 Metacritic What’s the distribution of critic ratings of Albums that were released between 2018 and 2022 on Metacritic look like? How does it change over time? The following graph tells us the answer. First, from the marginal density graph in the right part of the graph, we can tell that the distribution of critic ratings is a little bit left skewed. Most albums’ ratings are within the range [70,90]. There are, however, a few albums with really low ratings. For example, one album’s rating on Metacritic doesn’t even reach 40 out of 100. Second, the top density curve of the graph tells us how the number of ratings of albums on Metacritic changes over time. We can see that the number of ratings is steadily decrease over time. Since every album only has one score on Metacritic, it could be that the phenomenon that the number of albums released is decreased over time leads to the decline. Lastly, the purple dot in the graph shows the album ratings on Metacritic and corresponding release time. At first glance, there is no obvious pattern or trend in it: points are roughly evenly distributed, and there is no sudden change along the release date. However, there is a small interesting finding: it seems that there exists invisible line that separate the points between different year. It is weird at first because we didn’t make any restriction on the date. However, after second thought, it is quite reasonable, artists also celebrate Christmas and New Year! So at the end of each year, there are basically no new albums released. 4.2 RYM The three pattern also exist in the below plot for RYM ratings. However, the variance of user ratings are much larger than critic reviews. Why? The lowest rating in Metacritic is around 40 while in RYM, it is below 1. Considering that the critic ratings range from 0 to 100 and user ratings range from 0 to 5, 40 in 100 is a much tender rating compared to 1 in 5. We can also observe that the number of score is decline over time and also there are invisible lines between years. Next, we will analysis relationship between the number of users who rate the album and the album ratings through an interactive scatter plot. You can hover over the point and it will show you the name of the album you point at. You can also select a rectangle to see the partial data and dive deeper. The point are colored according to the Metacritic score, the deeper of the color means the higher the score is. Along the y-axis, we can see that roughly the color of the points turns deeper, which means overall the RYM ratings and Metacritic Score have positive relationships.(We will discuss the relationship later) Regarding the relationship between the number of users who rate the album and the album ratings, we have following findings: - There is no albums with high votes and low ratings. It is reasonable because people have more incentive to rate an album if they think it is great, otherwise they will just omit it. There is an exception on the album “Jesus Is King” by Kanye West with 27k votes and 2.38 rating. Maybe we should all listen to this album thouroughly to find out why:) For albums with more than a few votes, the average rating increases with the number of votes. No albums in the area where represents high votes and max ratings There are points who are lower than expected ratings and should be seen as outliers. (e.g. “Jesus Is King”) Albums with low votes have relatively full range over y-axis. 4.3 Metacritic VS RYM In this part we will compare between metacritic ratings and RYM ratings. The following boxplot shows the distribution of Metacritic ratings and RYM ratings in each year. We have following findings: We can see that the Metacritic ratings is overall higher than the user ratings. Maybe it is because the score range is different or the user is tend to be more harsh. The Metacritic ratings is slightly increased over the year while there is no same trend in RYM score plot. The variances of the Metacritic ratings are roughly the same in each year, while the variance of RYM ratings various a lot. There are more low ratings outliers in RYM data sets than Metacritic. We show the top 15 rated singers/artists in Metacritic and RYM in the following graph. Unfortunately, no singer is in both the top 15 of Metacritic ratings and the top 15 of RYM ratings.T his shows how different the tastes of professional music critics are from those of the public. Does a high Metscritic score indicate a high RYM rating? Roughly YES! The following scatter plot with smooth line shows the relationship between RYM Score and Metacritic score. The line has a positive slope with relative smally confidence interval(grey area around the line). However, the answer is not so sure in the case that one of the score is extreme low. We can see that in the high subregion, the points are very dense. But in the lower left corner of the graph, the distribution of points begins to scatter. This shows that if the Metacritic score is particularly low, we are no longer very confident in our answer. That is, a low score of Metacritic no longer indicates a low score of RYM. Vice versa. The following graph have 5 facets each of which contains scatter plot with smooth line in different year. Overall the patterns are same with the above graph. However, there are subtle different in the lower left corner and higher right corner between different year. For example, we have more confidence with our answer to the question “Does a high Metscritic score indicate a high RYM rating?” in year 2019 and 2021 for extremely low rating cases(lower left corner). 4.4 Spotify The below scatter plot with marginal density plot shows how Spotify popularity of album distributed and how it changed over time. Different to ratings, the distribution of popularity is a bit right skewed rather than left skewed, which tells us that most album have relatively low popularity. It is worth noting that the popularity here means the maximum popularity of songs in a album. We will discuss the commons and difference of the distribution between maximum popularity, minimum popularity, average popularity and median popularity later. The graph below shows the distribution of the box plot of min, max, average and median popularity in different years. We can see that the growth trend and distribution changes are similar for these four graphs. We also find that the popularity increases with the year. This makes sense because the popularity provided by Spotify is the station’s song popularity at a certain date, and people usually play albums just released more frequently rather than those released years ago. Next, we draw a parallel coordinate plot on different representative methods of an album(avg, max, min and median). The major trend is that all these four variables are positive related. We can conclude this by the nearly horizontal lines between them. However, there do exist exception, we can also find some lines, who has extreme low average popularity, high maximum popularity, low minimum popularity and high median popularity. This means that, there ia a small fraction of albums, in which the variance of popularity of different tracks/songs can be very large. 4.4.1 Spotify Track The analysis so far has been at the album level; in this subsection, we will focus on the song level. Have you ever wonder what are the factors that contribute to the popularity of a song? The common practice is to pick two variables that you think are correlated and graph or analyze them. However with Spotify’s dataset of over 15 variables, a two-by-two analysis would take a lot of time and effort and be extremely inefficient. To explore this, we plotted a heat map of the correlations between the variables in the Spotify track dataset. Color blue represents positive correlations and red represents negative correlations. Finding the rows and columns correlated with popularity, we can find that popularity is very positively correlated with the danceability of the song and negatively correlated with the instrumentalness of the song. Is this really the case? For further analysis, we plotted the scatter plot of popularity vs. instrumentalness and the scatter plot of popularity vs. danceability. The plot on the left shows popularity vs. instrumentalness. We can see that the points are mostly concentrated at the ends of the x-axis, and there is a tendency for the popularity to decrease as the instrumentalness rises. In addition, we also find that almost all points with high popularity are concentrated in the region where the instrumentalness is particularly small (upper left corner). 4.5 Spotify VS Metacritic VS RYM Do albums with high ratings also have high popularity? To answer this question, we drew scatter plots of Spotify popularity and metacritic rating as well as scatter plots of Spotify popularity and Rate Your Music rating. We can see that the distribution of these two plots is about the same. Firstly, most of the points are concentrated in the medium rating position. Second, the ratings of albums with low Spotify popularity are usually at an average level, and then the range of ratings of albums with high Spotify popularity is very large. In addition, the curve fitted by geom_smooth tells us that albums with extreme low or extreme high ratings are usually more popular. This sounds quite reasonable. Because, high quality albums with high ratings are popular with the masses, while albums with low ratings, which we usually call catchy songs, are also very popular on the web. After all, in this day and age, the attributes of society are entertaining. The following two graphs show the relationship between Spotify popularity and metacritic rating as well as the relationship between Spotify popularity and Rate Your Music rating in different years. Although in general, the trends and distribution of these graphs are similar to the ones we just mentioned, in some years, there are some edge cases that lead to subtle changes in the situation. For example, in the second graph below, which shows Spotify popularity and Rate Your Music rating, in 2021, albums with higher ratings no longer enjoy higher popularity, which is a curious phenomenon. A closer look reveals that there is an outlier that causes the fitted curve to shift downward. In order to better analyze the relationship between popularity and rating, and considering that these are all continuous variables, we plotted the Parallel coordinate plot and properly changed the order of the variables for better observation. Overall, the relationship between the five variables looks like a capital M, which means that the majority of albums fall within a range where high ratings and low popularity are associated overall. This corresponds to the graph we just presented, where the center of the graph is in the lower right corner. Of course, there are some exceptions in the Parallel coordinate plot, such as the inverted M. These are albums with low ratings but very high popularity. Below is the Parallel coordinate plot by year, and we can see that in addition to showing the overall trend, the exceptions, i.e., the inverted M shape, become more and more pronounced as the year increases. We can see that in 2018, the number of inverted M shapes lines is small and they do not stand out, meaning that the minimum popularity is not high. However, in 2022, there are more albums that have this very low rating, yet are extremely popular, both in terms of minimum, maximum and median popularity. Perhaps this is related to the gradual popularity of short videos and their viral spread of catchphrases. In any case, it seems to show that our time is being occupied by entertainment little by little. "],["interactive-component.html", "Chapter 5 Interactive component", " Chapter 5 Interactive component This section allow users to intractively explore the relationship between the review and popularity of albums. We selected top 100 albums on Metacritic in 2022. We also present the relationship between the review and other aspects like danceability and energy. The possibilities are unlimited. On the left half of the page, we rank the albums according to the Metacritic chart. The right half of the page is interactive. First, it present the average popularity of the album on Spotify in a way that resembles a Cleveland dot plot. As we can discover, locally, there is no strong association between the review rank and the average popularity. However, when we broaden our horizon to the whole chart, we can see a clear trend that albums with higher review rank are more popular. Moreover, users can click on the circle representing an album. Then the circle will expand to a popularity range of the tracks in that album. This provides more detailed information about the popularity of the album. Also, when users hover on the circle representing a track, it will show the track name. With this intractive gragh, users can easily figure out the review rank, average popularity of an album, and popularity of specific tracks. These dimensions cannot be easily presented in a static graph without clustering the graph. We also provide two other aspects: danceability and energy. After clicking on the buttons on the top, the graph will transition to present another aspect. iframe {border: none;} .book .book-body .page-wrapper .page-inner { max-width: 1250px !important; } "],["conclusion.html", "Chapter 6 Conclusion", " Chapter 6 Conclusion "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
